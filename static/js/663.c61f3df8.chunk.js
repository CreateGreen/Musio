"use strict";(self.webpackChunkmusio=self.webpackChunkmusio||[]).push([[663],{9525:function(e,n,t){t.r(n),t.d(n,{default:function(){return g}});var i=t(9439),a=t(2791),s=t(6252),r=t(5892),c="\n\nprecision mediump float;\n\nvarying vec2 vUv;\nvarying float vWave;\nuniform float uTime;\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v) {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n  \n  // First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n  \n  // Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n  \n  // Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n           \n  // Gradients: 7x7 points over a square, mapped onto an octahedron.\n  // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n  \n  // Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  \n  // Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nvoid main() {\n  vUv = uv;\n\n  vec3 pos = position;\n  float noiseFreq = 3.5;\n  float noiseAmp = 0.15; \n  vec3 noisePos = vec3(pos.x * noiseFreq + uTime, pos.y, pos.z);\n  pos.z += snoise(noisePos) * noiseAmp;\n  vWave =pos.z;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.);\n}\n",o="\n\n\nprecision mediump float;\n\nvarying vec2 vUv;\nvarying float vWave;\nuniform sampler2D uTexture1;\nuniform sampler2D uTexture2;\nuniform sampler2D uDisp;\nuniform float uClickState;\n \n\nvoid main() {\n  float wave = vWave * 0.25;\n  vec3 texture1 = texture2D(uTexture1, vUv + wave).rgb;\n  \n  vec3 texture2 = texture2D(uTexture2, vUv + wave).rgb;\n  vec3 disp = texture2D(uDisp, vUv+wave).rgb;\n\n  float pct = clamp((disp.g - uClickState)*100. , 0. , 1.);\n  vec3 color = mix(texture1 ,texture2, pct);\n  \n  gl_FragColor = vec4(color , 1.);\n}\n",x=t(7760),v=t.p+"static/media/test3.d079b7aa21f56795b9b2.jpg",l=t.p+"static/media/test4.bc215cc96d3aea6a6aaa.jpg",u=t.p+"static/media/noise4.45da5f1c0d7747ed9a84.jpg",m=t(599),p=t(2908),d=t(1087),y=t(184),h=function(e){var n=e.click;return(0,a.useEffect)((function(){n&&(m.p8.to(".maintext",{opacity:0,ease:p.EA.easeOut,x:500,stagger:.1,duration:1}),m.p8.to(".sidetext",{opacity:1,ease:p.EA.easeIn,x:150,duration:2}))}),[n]),(0,y.jsxs)("div",{className:"hometext",children:[(0,y.jsx)("div",{className:"hometext_main",children:(0,y.jsxs)("svg",{className:"hometext_svg",viewBox:"0 0 500 400",children:[(0,y.jsx)("text",{alignmentBaseline:"central",x:"0",y:"50%",className:"maintext",opacity:1,children:"M"}),(0,y.jsx)("text",{alignmentBaseline:"central",x:"150",y:"50%",className:"maintext",opacity:1,children:"U"}),(0,y.jsx)("text",{alignmentBaseline:"central",x:"300",y:"50%",className:"maintext",opacity:1,children:"S"}),(0,y.jsx)("text",{alignmentBaseline:"central",x:"400",y:"50%",className:"maintext",opacity:1,children:"I"}),(0,y.jsx)("text",{alignmentBaseline:"central",x:"500",y:"50%",className:"maintext",opacity:1,children:"O"})]})}),(0,y.jsx)("div",{className:"hometext_menu",children:(0,y.jsxs)("svg",{className:"hometext_sidesvg",viewBox:"0 0 200 400",children:[(0,y.jsx)(d.rU,{to:"/profile",children:(0,y.jsx)("text",{className:"sidetext",alignmentBaseline:"central",x:"-150",y:"30%",opacity:0,children:"Profile"})}),(0,y.jsx)(d.rU,{to:"/project",children:(0,y.jsx)("text",{className:"sidetext",alignmentBaseline:"central",x:"-150",y:"70%",opacity:0,children:"Project"})})]})})]})},f=t(849);function g(){var e=(0,a.useState)(!1),n=(0,i.Z)(e,2),t=n[0],p=n[1],d=(0,a.useRef)(!1),g=function(){var e=(0,a.useRef)(null),n=(0,s.z)().size,t=(0,s.D)(x.TextureLoader,v),i=(0,s.D)(x.TextureLoader,l),r=(0,s.D)(x.TextureLoader,u),h=(0,a.useMemo)((function(){return{uTime:{value:0},uTexture1:{value:t},uTexture2:{value:i},uClickState:{value:1},uDisp:{value:r}}}),[]);return(0,s.A)((function(n){var t=n.clock;e.current&&(e.current.uniforms.uTime.value=t.getElapsedTime(),d.current?m.p8.to(e.current.uniforms.uClickState,{value:0}):m.p8.to(e.current.uniforms.uClickState,{value:1}))})),(0,y.jsxs)("mesh",{scale:[1,1,1],onClick:function(){return d.current=!d.current,void p(d.current)},children:[(0,y.jsx)("planeGeometry",{args:[n.width,n.height,10,5]}),(0,y.jsx)("shaderMaterial",{ref:e,fragmentShader:o,vertexShader:c,uniforms:h})]})};return(0,y.jsxs)(f.E.div,{className:"home",initial:{opacity:0},animate:{opacity:1},exit:{opacity:0},transition:{duration:2},children:[(0,y.jsx)("div",{className:"home_text",children:(0,y.jsx)(h,{click:t})}),(0,y.jsx)("div",{className:"home_canvas",children:(0,y.jsx)(r.Xz,{orthographic:!0,dpr:window.devicePixelRatio,children:(0,y.jsx)(g,{})})})]})}}}]);
//# sourceMappingURL=663.c61f3df8.chunk.js.map