{"version":3,"file":"static/js/663.c61f3df8.chunk.js","mappings":"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","sources":["glsl/vertex.js","glsl/fragment.js","components/Hometext.tsx","routes/Home.tsx"],"sourcesContent":["const vertexShader = `\r\n\r\nprecision mediump float;\r\n\r\nvarying vec2 vUv;\r\nvarying float vWave;\r\nuniform float uTime;\r\n\r\n//\r\n// Description : Array and textureless GLSL 2D/3D/4D simplex\r\n//               noise functions.\r\n//      Author : Ian McEwan, Ashima Arts.\r\n//  Maintainer : ijm\r\n//     Lastmod : 20110822 (ijm)\r\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\r\n//               Distributed under the MIT License. See LICENSE file.\r\n//               https://github.com/ashima/webgl-noise\r\n//\r\n\r\nvec3 mod289(vec3 x) {\r\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\r\n}\r\n\r\nvec4 mod289(vec4 x) {\r\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\r\n}\r\n\r\nvec4 permute(vec4 x) {\r\n     return mod289(((x*34.0)+1.0)*x);\r\n}\r\n\r\nvec4 taylorInvSqrt(vec4 r)\r\n{\r\n  return 1.79284291400159 - 0.85373472095314 * r;\r\n}\r\n\r\nfloat snoise(vec3 v) {\r\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\r\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\r\n  \r\n  // First corner\r\n  vec3 i  = floor(v + dot(v, C.yyy) );\r\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\r\n  \r\n  // Other corners\r\n  vec3 g = step(x0.yzx, x0.xyz);\r\n  vec3 l = 1.0 - g;\r\n  vec3 i1 = min( g.xyz, l.zxy );\r\n  vec3 i2 = max( g.xyz, l.zxy );\r\n\r\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\r\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\r\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\r\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\r\n  vec3 x1 = x0 - i1 + C.xxx;\r\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\r\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\r\n  \r\n  // Permutations\r\n  i = mod289(i);\r\n  vec4 p = permute( permute( permute(\r\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\r\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\r\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\r\n           \r\n  // Gradients: 7x7 points over a square, mapped onto an octahedron.\r\n  // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\r\n  float n_ = 0.142857142857; // 1.0/7.0\r\n  vec3  ns = n_ * D.wyz - D.xzx;\r\n\r\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\r\n\r\n  vec4 x_ = floor(j * ns.z);\r\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\r\n\r\n  vec4 x = x_ *ns.x + ns.yyyy;\r\n  vec4 y = y_ *ns.x + ns.yyyy;\r\n  vec4 h = 1.0 - abs(x) - abs(y);\r\n\r\n  vec4 b0 = vec4( x.xy, y.xy );\r\n  vec4 b1 = vec4( x.zw, y.zw );\r\n\r\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\r\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\r\n  vec4 s0 = floor(b0)*2.0 + 1.0;\r\n  vec4 s1 = floor(b1)*2.0 + 1.0;\r\n  vec4 sh = -step(h, vec4(0.0));\r\n\r\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\r\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\r\n\r\n  vec3 p0 = vec3(a0.xy,h.x);\r\n  vec3 p1 = vec3(a0.zw,h.y);\r\n  vec3 p2 = vec3(a1.xy,h.z);\r\n  vec3 p3 = vec3(a1.zw,h.w);\r\n  \r\n  // Normalise gradients\r\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\r\n  p0 *= norm.x;\r\n  p1 *= norm.y;\r\n  p2 *= norm.z;\r\n  p3 *= norm.w;\r\n  \r\n  // Mix final noise value\r\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\r\n  m = m * m;\r\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\r\n                                dot(p2,x2), dot(p3,x3) ) );\r\n}\r\n\r\nvoid main() {\r\n  vUv = uv;\r\n\r\n  vec3 pos = position;\r\n  float noiseFreq = 3.5;\r\n  float noiseAmp = 0.15; \r\n  vec3 noisePos = vec3(pos.x * noiseFreq + uTime, pos.y, pos.z);\r\n  pos.z += snoise(noisePos) * noiseAmp;\r\n  vWave =pos.z;\r\n\r\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.);\r\n}\r\n`\r\nexport default vertexShader","const fragmentShader =`\r\n\r\n\r\nprecision mediump float;\r\n\r\nvarying vec2 vUv;\r\nvarying float vWave;\r\nuniform sampler2D uTexture1;\r\nuniform sampler2D uTexture2;\r\nuniform sampler2D uDisp;\r\nuniform float uClickState;\r\n \r\n\r\nvoid main() {\r\n  float wave = vWave * 0.25;\r\n  vec3 texture1 = texture2D(uTexture1, vUv + wave).rgb;\r\n  \r\n  vec3 texture2 = texture2D(uTexture2, vUv + wave).rgb;\r\n  vec3 disp = texture2D(uDisp, vUv+wave).rgb;\r\n\r\n  float pct = clamp((disp.g - uClickState)*100. , 0. , 1.);\r\n  vec3 color = mix(texture1 ,texture2, pct);\r\n  \r\n  gl_FragColor = vec4(color , 1.);\r\n}\r\n` \r\nexport default fragmentShader;\r\n","import \"./Hometext.css\";\r\nimport { gsap } from \"gsap\";\r\nimport { Power1 } from \"gsap\";\r\nimport { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ninterface PropsType {\r\n  click: boolean;\r\n}\r\n\r\nconst Hometext = ({ click }: PropsType) => {\r\n  const clicktrans = () => {\r\n    gsap.to(\".maintext\", {\r\n      opacity: 0,\r\n      ease: Power1.easeOut,\r\n      x: 500,\r\n      stagger:0.1,\r\n      duration: 1,\r\n    });\r\n    gsap.to(\".sidetext\", {\r\n      opacity: 1,\r\n      ease: Power1.easeIn,\r\n      x: 150,\r\n      duration: 2,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (click) {\r\n      clicktrans();\r\n    }\r\n  }, [click]);\r\n\r\n  return (\r\n    <div className=\"hometext\">\r\n      <div className=\"hometext_main\">\r\n        <svg className=\"hometext_svg\" viewBox=\"0 0 500 400\">\r\n          <text\r\n            alignmentBaseline=\"central\"\r\n            x=\"0\"\r\n            y=\"50%\"\r\n            className=\"maintext\"\r\n            opacity={1}\r\n          >\r\n            M\r\n          </text>\r\n          <text\r\n            alignmentBaseline=\"central\"\r\n            x=\"150\"\r\n            y=\"50%\"\r\n            className=\"maintext\"\r\n            opacity={1}\r\n          >\r\n            U\r\n          </text>\r\n          <text\r\n            alignmentBaseline=\"central\"\r\n            x=\"300\"\r\n            y=\"50%\"\r\n            className=\"maintext\"\r\n            opacity={1}\r\n          >\r\n            S\r\n          </text>\r\n          <text\r\n            alignmentBaseline=\"central\"\r\n            x=\"400\"\r\n            y=\"50%\"\r\n            className=\"maintext\"\r\n            opacity={1}\r\n          >\r\n            I\r\n          </text>\r\n          <text\r\n            alignmentBaseline=\"central\"\r\n            x=\"500\"\r\n            y=\"50%\"\r\n            className=\"maintext\"\r\n            opacity={1}\r\n          >\r\n            O\r\n          </text>\r\n        </svg>\r\n      </div>\r\n      <div className=\"hometext_menu\">\r\n        <svg className=\"hometext_sidesvg\" viewBox=\"0 0 200 400\">\r\n          <Link to=\"/profile\">\r\n            <text\r\n              className=\"sidetext\"\r\n              alignmentBaseline=\"central\"\r\n              x=\"-150\"\r\n              y=\"30%\"\r\n              opacity={0}\r\n            >\r\n              Profile\r\n            </text>\r\n          </Link>\r\n          <Link to=\"/project\">\r\n            <text\r\n              className=\"sidetext\"\r\n              alignmentBaseline=\"central\"\r\n              x=\"-150\"\r\n              y=\"70%\"\r\n              opacity={0}\r\n            >\r\n              Project\r\n            </text>\r\n          </Link>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hometext;\r\n","import \"./Home.css\";\r\nimport { useRef, useMemo, useState } from \"react\";\r\nimport { Canvas, useFrame, useLoader, useThree } from \"@react-three/fiber\";\r\nimport vertexShader from \"../glsl/vertex\";\r\nimport fragmentShader from \"../glsl/fragment\";\r\nimport * as THREE from \"three\";\r\nimport { ShaderMaterial, TextureLoader } from \"three\";\r\nimport image from \"../img/test3.jpg\";\r\nimport afterimg from \"../img/test4.jpg\";\r\nimport noise from \"../img/noise4.jpg\";\r\nimport Hometext from \"../components/Hometext\";\r\nimport { gsap } from \"gsap\";\r\nimport { MotionCanvas, motion as motion3d } from \"framer-motion-3d\";\r\nimport { motion, MotionConfig } from \"framer-motion\";\r\nimport Loading from \"../components/Loading\";\r\n\r\nexport default function Home() {\r\n\r\n  const [clickfortext, setclickfortext] = useState(false);\r\n\r\n  const click = useRef(false);\r\n  const transition = () => {\r\n    click.current = !click.current;\r\n    setclickfortext(click.current);\r\n  };\r\n  const Back = () => {\r\n    const mesh = useRef<ShaderMaterial | null>(null);\r\n    const { size } = useThree();\r\n    const background = useLoader(TextureLoader, image);\r\n    const afterbackground = useLoader(TextureLoader, afterimg);\r\n    const noiseimg = useLoader(TextureLoader, noise);\r\n\r\n    const uniforms = useMemo(\r\n      () => ({\r\n        uTime: {\r\n          value: 0.0,\r\n        },\r\n        uTexture1: {\r\n          value: background,\r\n        },\r\n        uTexture2: {\r\n          value: afterbackground,\r\n        },\r\n        uClickState: {\r\n          value: 1,\r\n        },\r\n        uDisp: {\r\n          value: noiseimg,\r\n        },\r\n      }),\r\n      []\r\n    );\r\n\r\n    useFrame((state) => {\r\n      const { clock } = state;\r\n      if (!mesh.current) {\r\n        return;\r\n      }\r\n      mesh.current.uniforms.uTime.value = clock.getElapsedTime();\r\n      click.current\r\n        ? gsap.to(mesh.current.uniforms.uClickState, { value: 0 })\r\n        : gsap.to(mesh.current.uniforms.uClickState, { value: 1 });\r\n    });\r\n\r\n    return (\r\n      <mesh scale={[1, 1, 1]} onClick={() => transition()}>\r\n        <planeGeometry args={[size.width, size.height, 10, 5]} />\r\n\r\n        <shaderMaterial\r\n          ref={mesh}\r\n          fragmentShader={fragmentShader}\r\n          vertexShader={vertexShader}\r\n          uniforms={uniforms}\r\n          // transparent={true}\r\n          // opacity={0}\r\n          // wireframe={true}\r\n          // side={THREE.DoubleSide}\r\n        />\r\n      </mesh>\r\n    );\r\n  };\r\n  \r\n\r\n  return (\r\n    <motion.div\r\n      className=\"home\"\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n      exit={{ opacity: 0 }}\r\n      transition={{ duration: 2 }}\r\n    >\r\n      <div className=\"home_text\">\r\n        <Hometext click={clickfortext} />\r\n      </div>\r\n      <div className=\"home_canvas\">\r\n        <Canvas orthographic={true} dpr={window.devicePixelRatio}>\r\n          <Back />\r\n        </Canvas>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n}\r\n"],"names":["click","useEffect","gsap","opacity","ease","Power1","x","stagger","duration","className","viewBox","alignmentBaseline","y","to","Home","useState","clickfortext","setclickfortext","useRef","Back","mesh","size","useThree","background","useLoader","TextureLoader","image","afterbackground","afterimg","noiseimg","noise","uniforms","useMemo","uTime","value","uTexture1","uTexture2","uClickState","uDisp","useFrame","state","clock","current","getElapsedTime","scale","onClick","args","width","height","ref","fragmentShader","vertexShader","motion","initial","animate","exit","transition","orthographic","dpr","window","devicePixelRatio"],"sourceRoot":""}